# Working from the following examples
# https://cristianadam.eu/20200113/speeding-up-c-plus-plus-github-actions-using-ccache/
# https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows

name: Python Package

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ 0.26 ]
  pull_request:
    branches: [ master, 0.26 ]
  release:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-macos:
    name: ${{ matrix.config.name }}
    runs-on: macos-latest
    env:
      ARCHFLAGS: "-std=c++11"
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "macos-latest-py39",
            python: "3.9.0"
          }
        - {
            name: "macos-latest-py38",
            python: "3.8.5"
          }
        - {
            name: "macos-latest-py37",
            python: "3.7.9"
          }
        - {
            name: "macos-latest-py36",
            python: "3.6.12"
          }
        - {
            name: "macos-latest-py35",
            python: "3.5"
          }
        - {
            name: "macos-latest-py27",
            python: "2.7"
          }
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Caching ccache files
        uses: actions/cache@v1.1.0
        with:
          path: ccache
          key: ${{ matrix.config.name }}-ccache
      
      # Adding a line to GITHUB_ENV is equivalent to exporting it
      - name: Configure ccache
        run: |
          mkdir -p $GITHUB_WORKSPACE/ccache
          ccache_basedir=$GITHUB_WORKSPACE
          echo CCACHE_BASEDIR="${ccache_basedir}" >> $GITHUB_ENV
          echo CCACHE_DIR="${ccache_basedir}/ccache" >> $GITHUB_ENV
          echo CCACHE_COMPRESS="true" >> $GITHUB_ENV
          echo CCACHE_COMPRESSLEVEL="6" >> $GITHUB_ENV
          echo CCACHE_MAXSIZE="300M" >> $GITHUB_ENV

      # echo "{path}" >> $GITHUB_PATH
      # Prepends a directory to the system PATH variable for all subsequent actions in the current job.
      - name: Install ccache
        run: |
          brew install ccache
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
          ccache -s

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.python }}
          architecture: x64

      # - name: Install python version
      #   run: |
      #     brew install pyenv
      #     pyenv install ${{ matrix.config.python }}
      #     pyenv local ${{ matrix.config.python }}
      #     echo PYENV_VERSION=${{ matrix.config.python }} >> $GITHUB_ENV
      #     pip install -U pip setuptools wheel
      #     env

      - name: Installation debug
        run: |
          python -c "import distutils.sysconfig as sysconfig; print(sysconfig.__file__)"
          env
          ccache -s

      - name: Building native wheel
        run: |
          ccache -z;
          pip install -U setuptools wheel
          python setup.py build;
          python setup.py bdist_wheel;
          python setup.py install;
          python setup.py sdist --formats=zip;
          python testdata/pymod/import_db.py;
          python testdata/pymod/import_rdb.py;
          python testdata/pymod/import_tl.py;
          python testdata/pymod/pya_tests.py;
          klayout_version=$(python -c 'import setup; print(setup.Config().version())');
          echo KLAYOUT_VERSION=${klayout_version} >> $GITHUB_ENV
          mkdir -p deploy/dist-pymod/$klayout_version;
          cp -a dist/{*.whl,*.zip} deploy/dist-pymod/$klayout_version;
          python -c 'import klayout.db as db; print(dir(db))';
          python -c 'import klayout.rdb as rdb; print(dir(rdb))';
          python -c 'import klayout.tl as tl; print(dir(tl))';

      - name: Build report
        run: |
          ccache -s
          ls -l dist/
      
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheel-${{ matrix.config.name }}
          path: |
            dist/*.whl

  build-ubuntu:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE: "quay.io/pypa/manylinux1_x86_64"
      PY_VERSION: "${{ matrix.config.pypa_py_version }}"
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "ubuntu-latest-py39",
            python: "3.9.0",
            pypa_py_version: "cp39-cp39"
          }
        - {
            name: "ubuntu-latest-py38",
            python: "3.8.5",
            pypa_py_version: "cp38-cp38"
          }
        - {
            name: "ubuntu-latest-py37",
            python: "3.7.9",
            pypa_py_version: "cp37-cp37m"
          }
        - {
            name: "ubuntu-latest-py36",
            python: "3.6.12",
            pypa_py_version: "cp36-cp36m"
          }
        - {
            name: "ubuntu-latest-py35",
            python: "3.5",
            pypa_py_version: "cp35-cp35m"
          }
        - {
            name: "ubuntu-latest-py27",
            python: "2.7",
            pypa_py_version: "cp27-cp27m" 
          }
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Caching ccache files
        uses: actions/cache@v1.1.0
        with:
          path: ccache
          key: ${{ matrix.config.name }}-ccache

      # Adding a line to GITHUB_ENV is equivalent to exporting it
      - name: Configure ccache
        run: |
          mkdir -p $GITHUB_WORKSPACE/ccache
          ccache_basedir=$GITHUB_WORKSPACE
          echo CCACHE_BASEDIR="${ccache_basedir}" >> $GITHUB_ENV
          echo CCACHE_DIR="${ccache_basedir}/ccache" >> $GITHUB_ENV
          echo CCACHE_COMPRESS="true" >> $GITHUB_ENV
          echo CCACHE_COMPRESSLEVEL="6" >> $GITHUB_ENV
          echo CCACHE_MAXSIZE="300M" >> $GITHUB_ENV

      # echo "{path}" >> $GITHUB_PATH
      # Prepends a directory to the system PATH variable for all subsequent actions in the current job.
      - name: Install ccache
        run: |
          sudo apt-get install -y ccache
          sudo /usr/sbin/update-ccache-symlinks
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          ccache -s

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.python }}
          architecture: x64

      - name: Installation debug
        run: |
          python -c "import distutils.sysconfig as sysconfig; print(sysconfig.__file__)"
          env
          ccache -s

      - name: Building Docker wheel
        run : |
          mkdir -p ccache;
          mkdir -p wheelhouse;
          docker pull $DOCKER_IMAGE;
          docker run --rm -e DOCKER_IMAGE -e PY_VERSION -v `pwd`:/io $DOCKER_IMAGE $PRE_CMD "/io/ci-scripts/docker/docker_build.sh";
          klayout_version=$(python -c 'import setup; print(setup.Config().version())'); 
          mkdir -p deploy/dist-pymod/$klayout_version;
          cp -a wheelhouse/klayout-*manylinux1*.whl deploy/dist-pymod/$klayout_version;
          pip install klayout --no-index -f ./wheelhouse;
          python testdata/pymod/import_db.py;
          python testdata/pymod/import_rdb.py;
          python testdata/pymod/import_tl.py;
          python testdata/pymod/pya_tests.py;

      - name: Build report
        run: |
          ls -l wheelhouse
          ccache -s
      
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheel-${{ matrix.config.name }}
          path: |
            wheelhouse/*manylinux*.whl

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [ build-macos, build-ubuntu ]
    if: contains(github.ref, 'refs/heads')
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2
    - name: Build source dist
      run: python setup.py sdist --formats=zip
    - name: Upload to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      run: |
        ls -R # twine upload **/*.whl *.zip
