# Working from the following examples
# https://cristianadam.eu/20200113/speeding-up-c-plus-plus-github-actions-using-ccache/
# https://docs.github.com/en/free-pro-team@latest/actions/guides/caching-dependencies-to-speed-up-workflows

name: Python Package

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ 0.26 ]
  pull_request:
    branches: [ master, 0.26 ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    env:
      MATRIX_EVAL: ${{ matrix.config.custom_script }}
      PIP_UPDATE: ${{ matrix.config.pip_update }}
      ARCHFLAGS: "-std=c++11"
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
            os: macos-latest,
            cc: "clang", cxx: "clang++",
            custom_script: "shopt -s expand_aliases; alias python='python3'; alias pip='pip3';",
            pip_update: "1"
          }

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Caching ccache files
        uses: actions/cache@v1.1.0
        with:
          path: ccache
          key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.config.name }}-ccache-
      
      # Adding a line to GITHUB_ENV is equivalent to exporting it
      - name: Configure ccache
        run: |
          mkdir -p $GITHUB_WORKSPACE/ccache
          echo ccache_basedir=$GITHUB_WORKSPACE >> $GITHUB_ENV
          echo CCACHE_BASEDIR="${ccache_basedir}" >> $GITHUB_ENV
          echo CCACHE_DIR="${ccache_basedir}/ccache" >> $GITHUB_ENV
          echo CCACHE_COMPRESS="true" >> $GITHUB_ENV
          echo CCACHE_COMPRESSLEVEL="6" >> $GITHUB_ENV
          echo CCACHE_MAXSIZE="2000M" >> $GITHUB_ENV

      - name: Installing the correct python version
        run: |
          brew install python3
      
      # echo "{path}" >> $GITHUB_PATH
      # Prepends a directory to the system PATH variable for all subsequent actions in the current job.
      - name: Install ccache
        run: |
          brew install ccache
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
          ccache -s

      - name: Preparing for Installation
        run: |
          env
          eval "${MATRIX_EVAL}"
          if [ "${PIP_UPDATE}" == "1" ]; then
              pip --version;
              pip install --upgrade pip || sudo pip install --upgrade pip;
              pip --version;
              pip install --upgrade setuptools wheel || sudo pip install --upgrade setuptools wheel;
          fi
          python -c "import distutils.sysconfig as sysconfig; print(sysconfig.__file__)"

      - name: Building wheel
        run: |
          eval "${MATRIX_EVAL}"
          ccache -z;
          python setup.py build;
          python setup.py bdist_wheel;
          python setup.py install;
          python setup.py sdist --formats=zip;
          python testdata/pymod/import_db.py;
          python testdata/pymod/import_rdb.py;
          python testdata/pymod/import_tl.py;
          python testdata/pymod/import_lib.py;
          python testdata/pymod/pya_tests.py;
          klayout_version=$(python -c 'import setup; print(setup.Config().version())');
          mkdir -p deploy/dist-pymod/$klayout_version;
          cp -a dist/{*.whl,*.zip} deploy/dist-pymod/$klayout_version;
          python -c 'import klayout.db as db; print(dir(db))';
          python -c 'import klayout.rdb as rdb; print(dir(rdb))';
          python -c 'import klayout.tl as tl; print(dir(tl))';
          ccache -s;